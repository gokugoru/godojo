generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  username      String?   @unique
  role          UserRole  @default(USER)
  lastLogin     DateTime? @map("last_login")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts     Account[]
  sessions     Session[]
  userProgress UserProgress[]
  achievements Achievement[]
  bookExports  BookExport[]
  bookmarks    Bookmark[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Tab {
  id            String   @id @default(cuid())
  slug          String   @unique
  titleEn       String   @map("title_en")
  titleRu       String   @map("title_ru")
  descriptionEn String?  @map("description_en")
  descriptionRu String?  @map("description_ru")
  sortOrder     Int      @default(0) @map("sort_order")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  categories Category[]
  modules    Module[]

  @@map("tabs")
}

model Category {
  id            String   @id @default(cuid())
  tabId         String   @map("tab_id")
  slug          String   @unique
  titleEn       String   @map("title_en")
  titleRu       String   @map("title_ru")
  descriptionEn String?  @map("description_en")
  descriptionRu String?  @map("description_ru")
  color         String?  @default("#3b82f6")
  sortOrder     Int      @default(0) @map("sort_order")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  tab     Tab      @relation(fields: [tabId], references: [id], onDelete: Cascade)
  modules Module[]

  @@map("categories")
}

model Module {
  id             String     @id @default(cuid())
  tabId          String     @map("tab_id")
  categoryId     String?    @map("category_id")
  slug           String     @unique
  titleEn        String     @map("title_en")
  titleRu        String     @map("title_ru")
  descriptionEn  String?    @map("description_en")
  descriptionRu  String?    @map("description_ru")
  duration       String?
  estimatedHours Int        @default(0) @map("estimated_hours")
  difficulty     Difficulty @default(BEGINNER)
  sortOrder      Int        @default(0) @map("sort_order")
  isPublished    Boolean    @default(false) @map("is_published")
  isFaang        Boolean    @default(false) @map("is_faang")
  gitPath        String?    @map("git_path")
  lastSyncAt     DateTime?  @map("last_sync_at")
  gitCommitHash  String?    @map("git_commit_hash")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  tab          Tab            @relation(fields: [tabId], references: [id], onDelete: Cascade)
  category     Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  sections     Section[]
  topics       Topic[]
  userProgress UserProgress[]
  bookmarks    Bookmark[]
  moduleTags   ModuleTag[]
  achievements Achievement[]

  @@map("modules")
}

model Section {
  id            String    @id @default(cuid())
  moduleId      String    @map("module_id")
  slug          String    @unique
  titleEn       String    @map("title_en")
  titleRu       String    @map("title_ru")
  contentEn     String?   @map("content_en") @db.Text
  contentRu     String?   @map("content_ru") @db.Text
  sortOrder     Int       @default(0) @map("sort_order")
  isPublished   Boolean   @default(false) @map("is_published")
  gitPath       String?   @map("git_path")
  lastSyncAt    DateTime? @map("last_sync_at")
  gitCommitHash String?   @map("git_commit_hash")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  module Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  topics Topic[]

  @@map("sections")
}

model Topic {
  id            String    @id @default(cuid())
  moduleId      String    @map("module_id")
  sectionId     String?   @map("section_id")
  slug          String    @unique
  titleEn       String    @map("title_en")
  titleRu       String    @map("title_ru")
  contentEn     String?   @map("content_en") @db.Text
  contentRu     String?   @map("content_ru") @db.Text
  codeExample   String?   @map("code_example") @db.Text
  videoUrl      String?   @map("video_url")
  githubUrl     String?   @map("github_url")
  sortOrder     Int       @default(0) @map("sort_order")
  duration      Int       @default(0)
  isPublished   Boolean   @default(false) @map("is_published")
  isFree        Boolean   @default(true) @map("is_free")
  gitPath       String?   @map("git_path")
  lastSyncAt    DateTime? @map("last_sync_at")
  gitCommitHash String?   @map("git_commit_hash")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  module       Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  section      Section?       @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  userProgress UserProgress[]
  bookmarks    Bookmark[]
  topicTags    TopicTag[]

  @@map("topics")
}

model UserProgress {
  id          String         @id @default(cuid())
  userId      String         @map("user_id")
  moduleId    String         @map("module_id")
  topicId     String?        @map("topic_id")
  status      ProgressStatus @default(NOT_STARTED)
  completedAt DateTime?      @map("completed_at")
  timeSpent   Int            @default(0) @map("time_spent")
  notes       String?        @db.Text
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  topic  Topic? @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId, topicId])
  @@map("user_progress")
}

model Achievement {
  id         String          @id @default(cuid())
  userId     String          @map("user_id")
  type       AchievementType
  moduleId   String?         @map("module_id")
  unlockedAt DateTime        @default(now()) @map("unlocked_at")
  metadata   Json?

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module? @relation(fields: [moduleId], references: [id], onDelete: SetNull)

  @@unique([userId, type, moduleId])
  @@map("achievements")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  moduleId  String?  @map("module_id")
  topicId   String?  @map("topic_id")
  notes     String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module? @relation(fields: [moduleId], references: [id], onDelete: SetNull)
  topic  Topic?  @relation(fields: [topicId], references: [id], onDelete: SetNull)

  @@unique([userId, moduleId, topicId])
  @@map("bookmarks")
}

model BookTemplate {
  id               String   @id @default(cuid())
  slug             String   @unique
  titleEn          String   @map("title_en")
  titleRu          String   @map("title_ru")
  descriptionEn    String?  @map("description_en") @db.Text
  descriptionRu    String?  @map("description_ru") @db.Text
  isPublic         Boolean  @default(true) @map("is_public")
  isPremium        Boolean  @default(false) @map("is_premium")
  includeCode      Boolean  @default(true) @map("include_code")
  includeExamples  Boolean  @default(true) @map("include_examples")
  includeProgress  Boolean  @default(false) @map("include_progress")
  fontSize         Int      @default(12) @map("font_size")
  pageSize         String   @default("A4") @map("page_size")
  theme            String   @default("light")
  primaryLanguage  String   @default("ru") @map("primary_language")
  includeLanguages String[] @default(["en", "ru"]) @map("include_languages")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  bookChapters BookChapter[]
  bookExports  BookExport[]

  @@map("book_templates")
}

model BookChapter {
  id             String   @id @default(cuid())
  bookTemplateId String   @map("book_template_id")
  tabId          String?  @map("tab_id")
  moduleId       String?  @map("module_id")
  sectionId      String?  @map("section_id")
  topicIds       String[] @default([]) @map("topic_ids")
  titleEn        String   @map("title_en")
  titleRu        String   @map("title_ru")
  sortOrder      Int      @default(0) @map("sort_order")
  isEnabled      Boolean  @default(true) @map("is_enabled")
  customIntroEn  String?  @map("custom_intro_en") @db.Text
  customIntroRu  String?  @map("custom_intro_ru") @db.Text
  customOutroEn  String?  @map("custom_outro_en") @db.Text
  customOutroRu  String?  @map("custom_outro_ru") @db.Text

  bookTemplate BookTemplate @relation(fields: [bookTemplateId], references: [id], onDelete: Cascade)

  @@map("book_chapters")
}

model BookExport {
  id             String       @id @default(cuid())
  bookTemplateId String       @map("book_template_id")
  userId         String?      @map("user_id")
  format         BookFormat
  language       String       @default("ru")
  status         ExportStatus @default(PENDING)
  exportSettings Json?        @map("export_settings")
  filePath       String?      @map("file_path")
  fileName       String?      @map("file_name")
  fileSize       Int?         @default(0) @map("file_size")
  downloadUrl    String?      @map("download_url")
  expiresAt      DateTime?    @map("expires_at")
  totalPages     Int?         @default(0) @map("total_pages")
  totalWords     Int?         @default(0) @map("total_words")
  errorMessage   String?      @map("error_message")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  bookTemplate BookTemplate @relation(fields: [bookTemplateId], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("book_exports")
}

model GitHubIntegration {
  id            String   @id @default(cuid())
  repoOwner     String   @map("repo_owner")
  repoName      String   @map("repo_name")
  branch        String   @default("main")
  lastSyncAt    DateTime @map("last_sync_at")
  lastCommitSha String   @map("last_commit_sha")
  syncStatus    String   @default("idle")
  errorMessage  String?  @map("error_message")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("github_integrations")
}

model Tag {
  id          String   @id @default(cuid())
  slug        String   @unique
  nameEn      String   @map("name_en")
  nameRu      String   @map("name_ru")
  colorEn     String   @default("#3b82f6") @map("color_en")
  colorRu     String   @default("#3b82f6") @map("color_ru")
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  moduleTags ModuleTag[]
  topicTags  TopicTag[]

  @@map("tags")
}

model ModuleTag {
  moduleId String @map("module_id")
  tagId    String @map("tag_id")

  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([moduleId, tagId])
  @@map("module_tags")
}

model TopicTag {
  topicId String @map("topic_id")
  tagId   String @map("tag_id")

  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([topicId, tagId])
  @@map("topic_tags")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum AchievementType {
  MODULE_COMPLETED
  TOPIC_COMPLETED
  WEEK_STREAK
  MONTH_STREAK
  FIRST_LESSON
  FAANG_READY
  SPEED_LEARNER
  BOOKMARK_COLLECTOR
  NOTE_TAKER
  COMMUNITY_STAR
}

enum BookFormat {
  PDF
  EPUB
  HTML
  MARKDOWN
  DOCX
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  EXPIRED
}
